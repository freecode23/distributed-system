/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class KeyValOperation implements org.apache.thrift.TBase<KeyValOperation, KeyValOperation._Fields>, java.io.Serializable, Cloneable, Comparable<KeyValOperation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyValOperation");

  private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("opType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("val", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeyValOperationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeyValOperationTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String propId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String opType; // required
  public int key; // required
  public int val; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROP_ID((short)1, "propId"),
    OP_TYPE((short)2, "opType"),
    KEY((short)3, "key"),
    VAL((short)4, "val");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROP_ID
          return PROP_ID;
        case 2: // OP_TYPE
          return OP_TYPE;
        case 3: // KEY
          return KEY;
        case 4: // VAL
          return VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEY_ISSET_ID = 0;
  private static final int __VAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("opType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VAL, new org.apache.thrift.meta_data.FieldMetaData("val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyValOperation.class, metaDataMap);
  }

  public KeyValOperation() {
  }

  public KeyValOperation(
    java.lang.String propId,
    java.lang.String opType,
    int key,
    int val)
  {
    this();
    this.propId = propId;
    this.opType = opType;
    this.key = key;
    setKeyIsSet(true);
    this.val = val;
    setValIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeyValOperation(KeyValOperation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPropId()) {
      this.propId = other.propId;
    }
    if (other.isSetOpType()) {
      this.opType = other.opType;
    }
    this.key = other.key;
    this.val = other.val;
  }

  @Override
  public KeyValOperation deepCopy() {
    return new KeyValOperation(this);
  }

  @Override
  public void clear() {
    this.propId = null;
    this.opType = null;
    setKeyIsSet(false);
    this.key = 0;
    setValIsSet(false);
    this.val = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPropId() {
    return this.propId;
  }

  public KeyValOperation setPropId(@org.apache.thrift.annotation.Nullable java.lang.String propId) {
    this.propId = propId;
    return this;
  }

  public void unsetPropId() {
    this.propId = null;
  }

  /** Returns true if field propId is set (has been assigned a value) and false otherwise */
  public boolean isSetPropId() {
    return this.propId != null;
  }

  public void setPropIdIsSet(boolean value) {
    if (!value) {
      this.propId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOpType() {
    return this.opType;
  }

  public KeyValOperation setOpType(@org.apache.thrift.annotation.Nullable java.lang.String opType) {
    this.opType = opType;
    return this;
  }

  public void unsetOpType() {
    this.opType = null;
  }

  /** Returns true if field opType is set (has been assigned a value) and false otherwise */
  public boolean isSetOpType() {
    return this.opType != null;
  }

  public void setOpTypeIsSet(boolean value) {
    if (!value) {
      this.opType = null;
    }
  }

  public int getKey() {
    return this.key;
  }

  public KeyValOperation setKey(int key) {
    this.key = key;
    setKeyIsSet(true);
    return this;
  }

  public void unsetKey() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  public void setKeyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
  }

  public int getVal() {
    return this.val;
  }

  public KeyValOperation setVal(int val) {
    this.val = val;
    setValIsSet(true);
    return this;
  }

  public void unsetVal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VAL_ISSET_ID);
  }

  /** Returns true if field val is set (has been assigned a value) and false otherwise */
  public boolean isSetVal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VAL_ISSET_ID);
  }

  public void setValIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VAL_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROP_ID:
      if (value == null) {
        unsetPropId();
      } else {
        setPropId((java.lang.String)value);
      }
      break;

    case OP_TYPE:
      if (value == null) {
        unsetOpType();
      } else {
        setOpType((java.lang.String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.Integer)value);
      }
      break;

    case VAL:
      if (value == null) {
        unsetVal();
      } else {
        setVal((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROP_ID:
      return getPropId();

    case OP_TYPE:
      return getOpType();

    case KEY:
      return getKey();

    case VAL:
      return getVal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROP_ID:
      return isSetPropId();
    case OP_TYPE:
      return isSetOpType();
    case KEY:
      return isSetKey();
    case VAL:
      return isSetVal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof KeyValOperation)
      return this.equals((KeyValOperation)that);
    return false;
  }

  public boolean equals(KeyValOperation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_propId = true && this.isSetPropId();
    boolean that_present_propId = true && that.isSetPropId();
    if (this_present_propId || that_present_propId) {
      if (!(this_present_propId && that_present_propId))
        return false;
      if (!this.propId.equals(that.propId))
        return false;
    }

    boolean this_present_opType = true && this.isSetOpType();
    boolean that_present_opType = true && that.isSetOpType();
    if (this_present_opType || that_present_opType) {
      if (!(this_present_opType && that_present_opType))
        return false;
      if (!this.opType.equals(that.opType))
        return false;
    }

    boolean this_present_key = true;
    boolean that_present_key = true;
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (this.key != that.key)
        return false;
    }

    boolean this_present_val = true;
    boolean that_present_val = true;
    if (this_present_val || that_present_val) {
      if (!(this_present_val && that_present_val))
        return false;
      if (this.val != that.val)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPropId()) ? 131071 : 524287);
    if (isSetPropId())
      hashCode = hashCode * 8191 + propId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpType()) ? 131071 : 524287);
    if (isSetOpType())
      hashCode = hashCode * 8191 + opType.hashCode();

    hashCode = hashCode * 8191 + key;

    hashCode = hashCode * 8191 + val;

    return hashCode;
  }

  @Override
  public int compareTo(KeyValOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPropId(), other.isSetPropId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propId, other.propId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOpType(), other.isSetOpType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opType, other.opType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVal(), other.isSetVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val, other.val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("KeyValOperation(");
    boolean first = true;

    sb.append("propId:");
    if (this.propId == null) {
      sb.append("null");
    } else {
      sb.append(this.propId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opType:");
    if (this.opType == null) {
      sb.append("null");
    } else {
      sb.append(this.opType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    sb.append(this.key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("val:");
    sb.append(this.val);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeyValOperationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public KeyValOperationStandardScheme getScheme() {
      return new KeyValOperationStandardScheme();
    }
  }

  private static class KeyValOperationStandardScheme extends org.apache.thrift.scheme.StandardScheme<KeyValOperation> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, KeyValOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.propId = iprot.readString();
              struct.setPropIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opType = iprot.readString();
              struct.setOpTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.key = iprot.readI32();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.val = iprot.readI32();
              struct.setValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, KeyValOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.propId != null) {
        oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
        oprot.writeString(struct.propId);
        oprot.writeFieldEnd();
      }
      if (struct.opType != null) {
        oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
        oprot.writeString(struct.opType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI32(struct.key);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VAL_FIELD_DESC);
      oprot.writeI32(struct.val);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeyValOperationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public KeyValOperationTupleScheme getScheme() {
      return new KeyValOperationTupleScheme();
    }
  }

  private static class KeyValOperationTupleScheme extends org.apache.thrift.scheme.TupleScheme<KeyValOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KeyValOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPropId()) {
        optionals.set(0);
      }
      if (struct.isSetOpType()) {
        optionals.set(1);
      }
      if (struct.isSetKey()) {
        optionals.set(2);
      }
      if (struct.isSetVal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPropId()) {
        oprot.writeString(struct.propId);
      }
      if (struct.isSetOpType()) {
        oprot.writeString(struct.opType);
      }
      if (struct.isSetKey()) {
        oprot.writeI32(struct.key);
      }
      if (struct.isSetVal()) {
        oprot.writeI32(struct.val);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KeyValOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.propId = iprot.readString();
        struct.setPropIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.opType = iprot.readString();
        struct.setOpTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.key = iprot.readI32();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.val = iprot.readI32();
        struct.setValIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

